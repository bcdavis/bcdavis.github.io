{"version":3,"sources":["context/context.js","components/Hero/Hero.jsx","components/Title/Title.jsx","components/About/About.jsx","components/Projects/Projects.jsx","components/Contact/Contact.jsx","components/Footer/Footer.jsx","components/Nav/Nav.jsx","mock/data.js","App.js","index.js"],"names":["PortfolioContext","React","createContext","PortfolioProvider","Provider","Consumer","Header","hero","useContext","title","name","subtitle","cta","useState","isDesktop","setIsDesktop","isMobile","setIsMobile","useEffect","window","innerWidth","id","className","Container","left","bottom","duration","delay","distance","to","smooth","Title","About","about","paragraphOne","resume","Row","Col","md","sm","target","rel","href","Projects","projects","open","isCaseStudyOpen","activeId","setActiveId","toggleActive","event","preventDefault","x","console","log","splitStr","split","newId","concat","document","getElementById","scrollIntoView","renderSection","sectionTitle","inputList","map","para","indexOf","Image","src","fluid","CaseStudySlideDrawer","currProj","cs","caseStudy","background","length","problem","audience","personas","challStmt","team","role","constraints","process","retrospective","project","projNum","info","url","info2","repo","img","techUsed","lg","techName","Badge","variant","ButtonGroup","toggle","vertical","Button","onClick","e","aria-controls","aria-expanded","right","options","reverse","max","perspective","scale","speed","transition","axis","reset","easing","data-tilt","Collapse","in","Contact","contact","btn","email","networks","footer","network","aria-label","Footer","aria-hidden","Date","getFullYear","NavBar","nav","path2","path1","path3","path4","Nav","navbar","as","Item","spy","offset","navData","heroData","aboutData","paragraphTwo","paragraphThree","projectsData","nanoid","links","contactData","footerData","App","setHero","setAbout","setProjects","setContact","setFooter","setNav","value","type","currentTarget","classList","contains","add","remove","handleMenuClick","data-menu","Hero","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.15717506.chunk.js","sourcesContent":["import React from 'react';\n\nconst PortfolioContext = React.createContext();\n\nexport const PortfolioProvider = PortfolioContext.Provider;\nexport const PortfolioConsumer = PortfolioContext.Consumer;\n\nexport default PortfolioContext;\n","import React, { useContext, useState, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport Fade from 'react-reveal/Fade';\nimport { Link } from 'react-scroll';\nimport PortfolioContext from '../../context/context';\n\nconst Header = () => {\n  const { hero } = useContext(PortfolioContext);\n  const { title, name, subtitle, cta } = hero;\n\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  return (\n    <section id=\"hero\" className=\"jumbotron\">\n      <Container>\n        <Fade left={isDesktop} bottom={isMobile} duration={1000} delay={500} distance=\"30px\">\n          <h1 className=\"hero-title\">\n            {title || 'Hi, my name is'}{' '}\n            <span className=\"text-color-main\">{name || 'Your Name'}</span>\n            <br />\n            <span className=\"subtitle\">{subtitle || \"I'm the Unknown Developer.\"}</span>\n          </h1>\n        </Fade>\n        <Fade left={isDesktop} bottom={isMobile} duration={1000} delay={1000} distance=\"30px\">\n          <p className=\"hero-cta\">\n            <span className=\"cta-btn cta-btn--hero\">\n              <Link to=\"projects\" smooth duration={1000}>\n                {cta || 'My Work'}\n              </Link>\n            </span>\n          </p>\n        </Fade>\n      </Container>\n    </section>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Fade from 'react-reveal/Fade';\nimport PropTypes from 'prop-types';\n\nconst Title = ({ title }) => (\n  <Fade bottom duration={1000} delay={300} distance=\"0px\">\n    <h2 className=\"section-title\">{title}</h2>\n  </Fade>\n);\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import React, { useContext, useState, useEffect } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Title from '../Title/Title';\n//import AboutImg from '../Image/AboutImg';\nimport PortfolioContext from '../../context/context';\n\nconst About = () => {\n  const { about } = useContext(PortfolioContext);\n  const { paragraphOne, resume } = about;\n\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  return (\n    <section id=\"about\">\n      <Container>\n        <Title className=\"about-title\" title=\"About Me\" />\n        <Row className=\"about-wrapper\">\n          {/* <Col md={6} sm={12}>\n            <Fade bottom duration={1000} delay={600} distance=\"30px\">\n              <div className=\"about-wrapper__image\">\n                <AboutImg alt=\"profile picture\" filename={img} />\n              </div>\n            </Fade>\n          </Col> */}\n          <Col className=\"info-wrapper\" md={10} sm={12}>\n            <Fade left={isDesktop} bottom={isMobile} duration={500} delay={250} distance=\"30px\">\n              <div className=\"about-wrapper__info\">\n                <p className=\"about-wrapper__info-text\">\n                  {paragraphOne ||\n                    'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Excepturi neque, ipsa animi maiores repellendu distinctioaperiam earum dolor voluptatum consequatur blanditiis inventore debitis fuga numquam voluptate architecto itaque molestiae.'}\n                </p>\n                {/* <p className=\"about-wrapper__info-text\">\n                  {paragraphTwo ||\n                    'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Excepturi neque, ipsa animi maiores repellendu distinctioaperiam earum dolor voluptatum consequatur blanditiis inventore debitis fuga numquam voluptate architecto itaque molestiae.'}\n                </p>\n                <p className=\"about-wrapper__info-text\">\n                  {paragraphThree || 'Lorem ipsum dolor sit, amet consectetur adipisicing elit.'}\n                </p> */}\n                {resume && (\n                  <span className=\"d-flex mt-3 md-center\">\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"cta-btn cta-btn--resume\"\n                      href={resume}\n                    >\n                      Resume\n                    </a>\n                  </span>\n                )}\n              </div>\n            </Fade>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default About;\n","import React, { useContext, useEffect, useState } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport Tilt from 'react-tilt';\n//import { Link } from 'react-scroll';\nimport { Container, Row, Col, Badge, ToggleButton, Button, Image, ButtonGroup, Collapse } from 'react-bootstrap';\nimport PortfolioContext from '../../context/context';\nimport Title from '../Title/Title';\n//import CaseStudySlideDrawer from './CaseStudySlideDrawer';\n\nconst Projects = () => {\n  const { projects } = useContext(PortfolioContext); // get all projects from data.js?\n\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [isCaseStudyOpen, setIsCaseStudyOpen] = useState({\n    open: false,\n    id: null,\n  });\n  const [checked, setChecked] = useState(false);\n\n  const csBtnText_toOpen = \"View Case Study\";\n  const csBtnText_toClose = \"Close Case Study\";\n\n  const [activeId, setActiveId] = useState({\n    open: false,\n    id: '0'\n  });\n\n  const [open, setOpen] = useState(false);\n\n\n  // pseudo accordion functionality\n\n\n  function toggleActive(id, event) {\n    //debugger;\n    event.preventDefault();\n    let x = event.target.id;\n\n    console.log(\"toggleActive -- new id vs old id: \", id, activeId.id, activeId.open, x);\n    if (activeId.id === id) {\n      // going from open case study to closed case study\n      setActiveId({ open: false, id: null });\n    } else {\n      // going from closed or another open case study to a new open case study\n      setActiveId({ open: true, id: id });\n    }\n\n    // rename target id to target the button that's always visible above the sliding drawer\n    let dash = \"-\";\n    let splitStr = x.split(\"-\"); // split up id by '-' character\n    if ( splitStr[0] === \"toggleBtn2\" ) {\n      splitStr[0] = \"toggleBtn1\"; // replace target id to always visible button\n    }\n  \n  let newId = splitStr[0].concat(dash, splitStr[1]);\n\n    document.getElementById(newId).scrollIntoView(); // make the clicked button move to the top of the screen\n  }\n\n  //const drawers = document.querySelectorAll('.case-study-drawer');\n\n  // const [count, setCount] = useState(0);\n\n  //let outcome = '';\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  /*\n  useEffect(() => {\n    if (checked) {\n      console.log('Checked: ', checked);\n      \n    }\n    else{ \n      console.log('Checked: ', checked);\n    }\n  }, [checked]);\n  */\n\n  useEffect(() => {\n    //console.log(\"PROJECTS---isCaseStudyOpen--useEffect(): \", isCaseStudyOpen);\n    console.log(\"Projects--useEffect --> activeId: \", activeId);\n    if (isCaseStudyOpen.open === true) {\n      //console.log('Case study is open: ', isCaseStudyOpen.id);\n      console.log();\n    } else {\n      //console.log('Case Study is closed:', isCaseStudyOpen.id);\n      console.log();\n    }\n  }, []);\n\n\n  function replaceButtonText(buttonElem, text){\n    if (document.getElementById)\n    {\n      if (buttonElem)\n      {\n        //console.log(\"Checking button ---- \");\n        //console.log(\"buttonElem.childNodes[1].nodeValue: \", buttonElem.childNodes[1].nodeValue);\n        //console.log(\"buttonElem.innerText: \", buttonElem.innerText);\n        if (buttonElem.childNodes[1])\n        {\n          //console.log(\"have childNodes\");\n          buttonElem.childNodes[1].nodeValue=text;\n          \n        }\n        else if (buttonElem.value)\n        {\n          //console.log(\"have value\");\n          buttonElem.value=text;\n        }\n        else //if (button.innerHTML)\n        {\n          //console.log(\"have innerText\");\n          buttonElem.innerText=text;\n        }\n      }\n    }\n  }\n\n\n\n\n  const handleCaseStudy = (e) => {\n    const prevCS = isCaseStudyOpen; // the id and open status of the project last interacted with\n    const prevCaseStudyBtn = document.getElementById(`${prevCS.id}`); // grabs the case study button of the current project\n    const prevDrawer = document.getElementById(`${prevCS.id}-drawer`); // grab the case study drawer of the project last interacted with\n\n    const currCSId = e.currentTarget.value; // the id of the project we just clicked\n    const currCaseStudyBtn = document.getElementById(currCSId); // grabs the case study button of the current project\n    const currDrawer = document.getElementById(`${currCSId}-drawer`); // grabs the case study drawer of the current project\n\n    // console.log(\"---- Case study information ----\");\n    // console.log(\"--------------------------------\");\n    // console.log(\"prevCS: \", prevCS);\n    // console.log(\"new currCSId: \", currCSId);\n    // console.log(\"--------------------------------\");\n    // console.log(\"prevCaseStudyBtn: \", prevCaseStudyBtn === null ? prevCaseStudyBtn : prevCaseStudyBtn.innerText);\n    // console.log(\"currCaseStudyBtn: \", currCaseStudyBtn.innerText);\n    // console.log(\"--------------------------------\");\n    // console.log(\"prevDrawer: \", prevDrawer);\n    // console.log(\"currDrawer: \", currDrawer);\n    //outcome = 'outcome';\n    // compare id of current case study (currCSId = case study id) to that which is stored in state\n    if (currCSId === prevCS.id) {\n\n      //\n      // clicked the SAME case study button of a project whose \n      // case study status was last changed (previously in state)\n      //\n\n      if (prevCS.open === true) {\n        //console.log(\"This case study was originally open\");\n        // If the 'open' status of the last case study is 'true', we want to close that case study\n        //outcome += '- selfOpen-->selfClosed -';\n        setIsCaseStudyOpen({ open: false, id: currCSId });\n        // Change case study button text\n        replaceButtonText(prevCaseStudyBtn, csBtnText_toOpen);\n        // Close the previous case study's drawer\n        prevDrawer.classList.remove('drawer-open');\n        \n      } else {\n        //console.log(\"This case study was originally closed\");\n        //outcome += '- selfClosed-->selfOpen -';\n        // If the 'open' status of the last case study is 'false', we want to open that case study\n        setIsCaseStudyOpen({ open: true, id: currCSId });\n        // Change case study button text\n        replaceButtonText(currCaseStudyBtn, csBtnText_toClose);\n        // Open the new case study drawer\n        currDrawer.classList.add('drawer-open'); \n      }\n    } else {\n\n      //\n      // Clicked the case study button of a DIFFERENT project than \n      // that which was last changed (previously in state)\n      //\n\n      if (prevCS.open === true) {\n        //console.log(\"This case study was originally open\");\n        //outcome += '- otherClosed -';\n        // Close the case study in previously changed state if it is 'open'\n        setIsCaseStudyOpen({ open: false, id: prevCS.id });\n        // Change case study button text\n        replaceButtonText(prevCaseStudyBtn, csBtnText_toOpen);\n        // Close the previous case study's drawer\n        prevDrawer.classList.remove('drawer-open');\n      }\n      // Open a new case study\n      //outcome += '- selfOpen -';\n      setIsCaseStudyOpen({ open: true, id: currCSId });\n      // Change case study button text\n      replaceButtonText(currCaseStudyBtn, csBtnText_toClose);\n      // Open the new case study's drawer\n      currDrawer.classList.add('drawer-open');\n    }\n    //console.log(outcome);\n  };\n\n  const handleAccToggle = (e) => {\n    console.log(\"onClick: \", e);\n\n  }\n\n\n// ================= Case Study Accordion Drawer =====================\n\n\nconst renderSection = (sectionTitle, inputList) => {\n  // sectionTitle is a string\n  // inputList is an array of strings\n  return (\n      <>\n          <div className=\"cs-section\">\n              <h3 className=\"cs-title\">{sectionTitle}</h3>\n              <div className=\"cs-paragraphs\">\n                  {inputList.map((para) => {\n                      // para is a string element in the inputList array\n\n                      // Check if para is an image file name\n                      if((para.indexOf(\".jpg\") > 0) || (para.indexOf(\".png\") > 0)){\n                          // The para string could be an image with .jpg or .png extension\n                          return (\n                              <div className=\"cs-img-container\">\n                                  <Image className=\"cs-img\" src={`/images/${para}`} fluid/>\n                              </div>\n                          )\n                      }\n                      // If not a file name, treat as regular text\n                      else {\n                          return (\n                              <p className=\"cs-para-text\">{para}</p>\n                          )\n                      }\n\n                  })}\n              </div>\n              {/* add a line break after each section */}\n              <br></br> \n          </div>\n          \n      </>\n  )\n}\n\n  const CaseStudySlideDrawer = ({ currProj }) => {\n    //const csBtnText_toOpen = \"View Case Study\";\n    //const csBtnText_toClose = \"Close Case Study\";\n\n    // const [isDesktop, setIsDesktop] = useState(false);\n    // const [isMobile, setIsMobile] = useState(false);\n\n    // const [activeId, setActiveId] = useState(isCaseStudyOpen);\n\n    // useEffect(() => {\n    //     //console.log(\"CASESTUDY---isCaseStudyOpen--useEffect(): \", isCaseStudyOpen);\n    //     if (isCaseStudyOpen.open === true) {\n    //         //console.log('Case study is open: ', isCaseStudyOpen.id);\n    //         console.log();\n    //     } else {\n    //         //console.log('Case Study is closed:', isCaseStudyOpen.id);\n    //         console.log();\n    //     }\n    // }, []);\n\n\n    //console.log(\"currProj\", currProj);\n    // pass in the currently-rendering project\n    // Grab caseStudy attribute from object:\n    const cs = currProj.caseStudy; // caseStudy is an object with the following properties:\n    \n    // Problem, audience, personas, challStmt, Team, Role, Constraints, Process, Retrospective \n    \n    //const cs_keys = Object.keys(cs); // return an array of keys --- used for future improvements\n\n    // This function renders the paragraphs of written content associated with a case study section\n\n\n\n    return (\n        <>\n            {/* <Fade left={isDesktop} bottom={isMobile} duration={500} delay={0} distance=\"0px\"> */}\n                <div id={`cs-drawer-${currProj.id}`} className=\"cs-drawer\">\n                    {cs.background.length > 0 ? renderSection(\"Background\", cs.background): null}\n                    {cs.problem.length > 0 ? renderSection(\"Problem\", cs.problem) : null}\n                    {cs.audience.length > 0 ? renderSection(\"Audience\", cs.audience) : null}\n                    {cs.personas.length > 0 ? renderSection(\"Personas\", cs.personas) : null}\n                    {cs.challStmt.length > 0 ? renderSection(\"Challenge Statement\", cs.challStmt) : null}\n                    {cs.team.length > 0 ? renderSection(\"The Team\", cs.team) : null}\n                    {cs.role.length > 0 ? renderSection(\"My Role\", cs.role) : null}\n                    {cs.constraints.length > 0 ? renderSection(\"Constraints\", cs.constraints) : null}\n                    {cs.process.length > 0 ? renderSection(\"Design Process\", cs.process) : null}\n                    {cs.retrospective.length > 0 ? renderSection(\"Success\", cs.retrospective) : null}\n                </div>\n            {/* </Fade> */}\n        </>\n    )\n  }\n\n// =======================================================================\n\n\n\n\n\n\n  // const handleCheck = (e) => {\n  //   console.log('drawers: ', drawers);\n  //   console.log(e.currentTarget.value);\n  //   //  console.log(e.currentTarget.checked);\n  //   setChecked(e.currentTarget.checked);\n    \n\n  //   const drawer = document.querySelector('.case-study-drawer');\n  //   if(checked){\n  //     drawer.classList.add('drawer-open');\n  //   }\n  //   else{\n  //     drawer.classList.remove('drawer-open');\n  //   }\n  // };\n\n\n  return (\n    <section id=\"projects\">\n      <Container>\n        <div className=\"project-wrapper\">\n          <Title title=\"Projects\" />\n          {projects.map((project) => {\n            const { projNum, title, info, info2, url, repo, img, id, techUsed, caseStudy} = project;\n            //console.log(\"projNum: \", projNum);\n            // for each project, store its variables to use for rendering\n            //let techList = techUsed.split(\" \");\n            // split up techUsed string into array of tech names, separated by spaces\n\n\n            return (\n                // <div className={activeId.id === projNum ? 'panel-wrap active-panel' : 'panel-wrap inactive-panel'}>\n                  <Row key={id}>\n                     <Col lg={4} sm={12}> {/*Need to rearrange this*/}\n                      <Fade \n                        left={isDesktop}\n                        bottom={isMobile}\n                        duration={500}\n                        delay={250}\n                        distance=\"30px\"\n                      >\n                        <div className=\"project-wrapper__text\">\n                          <h3 className=\"project-wrapper__text-title\">{title || 'Project Title'}</h3>\n                          <div>\n                            <p className=\"mb-4\">\n                              {info === '' ? '' : info}\n                            </p>\n                            <div className=\"tech-badges\">\n                              {techUsed.map((techName) => {\n                                return (\n                                  <div className=\"badgeContainer\">\n                                    <Badge className=\"techBadge-outline\" variant=\"light\">{techName}</Badge>\n                                  </div>\n                                )\n                              })}\n\n                            </div>\n                          </div>\n                          <ButtonGroup toggle vertical className=\"proj-btns\">\n                            <Button\n                              id={`toggleBtn1-${title}`}\n                              className=\"cta-btn cta-btn--hero case-study-btn\"\n                              onClick={(e) => toggleActive(projNum, e)}\n                              aria-controls={`example-collapse-content${projNum}`}\n                              aria-expanded={activeId.id === projNum} // open = an id not equal to 'null'\n                            >\n                              {activeId.id === projNum ? \"Close Case Study\" : \"View Case Study\"}\n                            </Button>\n                            <ButtonGroup className=\"live-src-btns\">\n                              {url === '' ? '' : \n                                <a\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"cta-btn text-color-main\"\n                                  href={url || '#!'}\n                                >\n                                  See Live\n                                </a>\n                              }\n\n                              {repo && (\n                                <a\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  className=\"cta-btn text-color-main\"\n                                  href={repo}\n                                >\n                                  Source Code\n                                </a>\n                              )}\n                            </ButtonGroup>\n                          </ButtonGroup>\n                        </div>\n                      </Fade>\n                    </Col>\n                    <Col lg={8} sm={12}>\n                      <Fade\n                        right={isDesktop}\n                        bottom={isMobile}\n                        duration={500}\n                        delay={250}\n                        distance=\"30px\"\n                      >\n                        <div className=\"project-wrapper__image\">\n\n                          \n                            <Tilt\n                              options={{\n                                reverse: false,\n                                max: 8,\n                                perspective: 1000,\n                                scale: 1,\n                                speed: 300,\n                                transition: true,\n                                axis: null,\n                                reset: true,\n                                easing: 'cubic-bezier(.03,.98,.52,.99)',\n                              }}\n                            >\n                                <div data-tilt className=\"thumbnail rounded containerHover\">\n                                   \n                                    <Image className=\"img\" src={`/images/${img}`} fluid/>\n                                  {/* <div className=\"hoverMe\"></div> */}\n                                </div>\n                            </Tilt>\n                        </div>\n                      </Fade>\n                    </Col>\n                    <Collapse in={activeId.id === projNum} className=\"cs-collapse\">\n                      <div id={`example-collapse-content${projNum}`}>\n                        <Col id={`${title}-drawer`} className=\"case-study-drawer\">                    \n                          <CaseStudySlideDrawer currProj={project} key={id}/>\n\n                          <Button\n                            id={`toggleBtn2-${title}`}\n                            className=\"cta-btn cta-btn--hero case-study-btn\"\n                            onClick={(e) => toggleActive(projNum, e)}\n                            aria-controls={`example-collapse-content${projNum}`}\n                            aria-expanded={activeId.id === projNum} // open = an id not equal to 'null'\n                            >\n                              {/* <Link to={`toggleBtn1-${title}`} smooth duration={1000}> */}\n                                Close Case Study\n                              {/* </Link> */}\n                          </Button>\n                        </Col>\n                      </div>\n                        \n                    </Collapse>\n                      \n                  </Row>\n                //</div>\n            );\n          })}\n        </div>\n      </Container>\n    </section>\n  );\n};\n\nexport default Projects;\n","import React, { useContext } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport { Container } from 'react-bootstrap';\nimport { Link } from 'react-scroll';\nimport PortfolioContext from '../../context/context';\nimport Title from '../Title/Title';\n\nconst Contact = () => {\n  const { contact } = useContext(PortfolioContext);\n  const { cta, btn, email } = contact;\n\n  const { footer } = useContext(PortfolioContext);\n  const { networks } = footer;\n\n  return (\n    <section id=\"contact\">\n      <Container>\n        <Title title=\"Contact\" />\n        <Fade bottom duration={500} delay={250} distance=\"30px\">\n          <div className=\"contact-wrapper\">\n            <p className=\"contact-wrapper__text\">\n              {cta || 'Wanna catch up?'}\n            </p>\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"contact-email-btn cta-btn cta-btn--resume\"\n              href={email ? `mailto:${email}` : 'https://github.com/cobidev/react-simplefolio'}\n            >\n              {btn || \"Let's Talk\"}\n              <i className=\"contact-email-icon fa fa-envelope\"></i>\n            </a>\n          </div>\n\n        </Fade>\n        <Fade bottom duration={500} delay={250} distance=\"20px\">\n          <div className=\"social-links--contact\">\n            {networks &&\n              networks.map((network) => {\n                const { id, name, url } = network;\n                return (\n                  <a\n                    key={id}\n                    href={url || 'https://github.com/cobidev/gatsby-simplefolio'}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    aria-label={name}\n                  >\n                    <i className={`fa fa-${name || 'refresh'} fa-inverse light`} />\n                  </a>\n                );\n              })}\n          </div>\n        </Fade>\n      </Container>\n    </section>\n  );\n};\n\nexport default Contact;\n","import React, { useContext } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { Link } from 'react-scroll';\nimport PortfolioContext from '../../context/context';\n//import GithubButtons from '../GithubButtons/GithubButtons';\n\n//import { githubButtons } from '../../mock/data';\n\nconst Footer = () => {\n  const { footer } = useContext(PortfolioContext);\n  //const { networks } = footer;\n  //const { isEnabled } = githubButtons;\n\n  return (\n    <footer className=\"footer navbar-static-bottom\">\n      <Container>\n          <span className=\"back-to-top\">\n            <Link to=\"hero\" smooth duration={1000}>\n              <i className=\"fa fa-angle-up fa-2x\" aria-hidden=\"true\" />\n            </Link>\n          </span>\n        {/* <span className=\"back-to-top\">\n          <Link to=\"hero\" smooth duration={1000}>\n            <i className=\"fa fa-angle-up fa-2x\" aria-hidden=\"true\" />\n          </Link>\n        </span>\n        <div className=\"social-links\">\n          {networks &&\n            networks.map((network) => {\n              const { id, name, url } = network;\n              return (\n                <a\n                  key={id}\n                  href={url || 'https://github.com/cobidev/gatsby-simplefolio'}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  aria-label={name}\n                >\n                  <i className={`fa fa-${name || 'refresh'} fa-inverse`} />\n                </a>\n              );\n            })}\n        </div> */}\n        <hr />\n        <p className=\"footer__text\">\n          © {new Date().getFullYear()} - {' '}\n          <a href=\"https://github.com/bcdavis\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Ben Davis\n          </a>\n        </p>\n\n        {/* {isEnabled && <GithubButtons />} */}\n      </Container>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useContext, useState, useEffect } from 'react';\nimport Nav from 'react-bootstrap/Nav';\n//import Fade from 'react-reveal/Fade';\nimport { Link } from 'react-scroll';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport PortfolioContext from '../../context/context';\n\n/**\n * TODO:\n * - mark nav items as active as you scroll along the page and when you click\n *   on a certain section using the nav bar.\n *\n * - Make nav bar span height of screen but keep nav items centered vertically\n */\n\n/* Set the width of the side navigation to 250px and the left margin of the page content to 250px */\n\n// if(sidenav.class === \"sidenav\"){\n//   sidenav.getElementsByClassName += \"responsive\";\n//   //sidenav.style.width = \"250px\";\n//   document.getElementById(\"right-content\").style.marginLeft = \"250px\";\n// }\n// else{\n//   sidenav.class = \"sidenav\";\n//   //sidenav.style.width = \"0\";\n//   document.getElementById(\"right-content\").style.marginLeft = \"0\";\n// }\n\nconst NavBar = () => {\n  const { nav } = useContext(PortfolioContext);\n  const { footer } = useContext(PortfolioContext);\n  const { networks } = footer;\n  const { path1, path2, path3, path4 } = nav;\n\n  const [isDesktop, setIsDesktop] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    if (window.innerWidth > 769) {\n      setIsDesktop(true);\n      setIsMobile(false);\n    } else {\n      setIsMobile(true);\n      setIsDesktop(false);\n    }\n  }, []);\n\n  return (\n    <>\n      <Nav navbar={true} className=\"sidenav menu\" id=\"vert-nav\" as=\"ul\">\n          <Nav.Item as=\"li\">\n            <div id=\"vert-nav-top\">\n              <Link className=\"to-hero\" to=\"hero\" smooth duration={700}>             \n                <h3>Ben Davis</h3>\n                <p>UI/UX Designer & Developer</p>\n              </Link>\n            </div>\n          </Nav.Item>\n          {/* <Nav.Item as=\"li\">\n            <Link\n              className=\"nav-link to-hero\"\n              to=\"hero\"\n              smooth\n              duration={700}\n              spy={true}\n              offset={-100}\n            >\n              <div>\n                <i className=\"fa fa-home nav-link__icon\" />\n              </div>\n              {path1 || 'Home1'}\n            </Link>\n          </Nav.Item> */}\n          <Nav.Item as=\"li\">\n            <Link\n              className=\"nav-link to-about\"\n              to=\"about\"\n              smooth\n              duration={700}\n              spy={true}\n              offset={0}\n            >\n              <div>\n                <i className=\"fa fa-user nav-link__icon\" />\n              </div>\n              {path2 || 'About1'}\n            </Link>\n          </Nav.Item>\n          <Nav.Item as=\"li\">\n            <Link\n              className=\"nav-link to-projects\"\n              to=\"projects\"\n              smooth\n              duration={700}\n              spy={true}\n              offset={0}\n            >\n              <div>\n                <i className=\"fa fa-file-code-o nav-link__icon\" />\n              </div>\n              {path3 || 'Projects1'}\n            </Link>\n          </Nav.Item>\n          <Nav.Item as=\"li\">\n            <Link\n              className=\"nav-link to-contact\"\n              to=\"contact\"\n              smooth\n              duration={700}\n              spy={true}\n              offset={0}\n            >\n              <div>\n                <i className=\"fa fa-paper-plane nav-link__icon\" />\n              </div>\n              {path4 || 'Contacts1'}\n            </Link>\n          </Nav.Item>\n        <ButtonGroup id=\"nav-footer\">\n          <div id=\"social-links\">\n            {networks &&\n              networks.map((network) => {\n                const { id, name, url } = network;\n                return (\n                  <a\n                    id={`${name}-icon`}\n                    key={id}\n                    href={url || 'https://github.com/cobidev/gatsby-simplefolio'}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                    aria-label={name}\n                  >\n                    <i className={`fa fa-${name || 'refresh'}`} />\n                  </a>\n                );\n              })}\n          </div>\n        </ButtonGroup>\n      </Nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { nanoid } from 'nanoid';\n\n// HEAD DATA\nexport const headData = {\n  title: 'Ben Davis', // e.g: 'Name | Developer'\n  lang: '', // e.g: en, es, fr, jp\n  description: 'Welcome to my website', // e.g: Welcome to my website\n};\n\nexport const navData = {\n  path1: 'Home',\n  path2: 'About',\n  path3: 'Projects',\n  path4: 'Contact',\n};\n\n// HERO DATA\nexport const heroData = {\n  title: \"Hi, I'm\",\n  name: 'Ben Davis',\n  subtitle: 'Front-End UI/UX Designer & Developer',\n  cta: '',\n};\n\n// ABOUT DATA\nexport const aboutData = {\n  img: 'profile.jpg',\n  paragraphOne: 'With a Bachelor of Science in Electrical and Computer Engineering from Lipscomb University and a certificate of UI/UX Front-End Development & Design from Nashville Software School, I have a commitment to excellence, strong written language skills, creativity and artistic talent, as well as accomplishments as an amateur photographer.',\n  paragraphTwo: '',\n  paragraphThree: '',\n  resume: 'https://github.com/bcdavis/bcdavis.github.io/blob/gh-pages/BenDavis_MARCH_2021.pdf', // if no resume, the button will not show up\n};\n\n// PROJECTS DATA\nexport const projectsData = [\n  {\n    projNum: 0, // Increment this number with each new project -- lets site know the order in which to render projects\n    id: nanoid(),\n    img: \"C43-Site-previewImg-1.png\",\n    title: 'NSS Cohort 43 Website',\n    info: \"Website for Nashville Software School's cohort 43 built by the cohort 43 UI/UX team.\",\n    info2: '',\n    url: 'https://nss-day-cohort-43.github.io/', // url for live demo of project\n    repo: 'https://github.com/nss-day-cohort-43/nss-day-cohort-43.github.io', // if no repo, the button will not show up\n    techUsed: [\"JavaScript\", \"CSS3\", \"HTML5\", \"Bootstrap\", \"ReactJS\", \"Figma\"], \n    caseStudy: {\n      // Each element in the following arrays represents a new paragraph of text or an image\n      // A line break is placed after each paragraph to allow some separation between bodies of text or images\n      // If a key/value pair is not applicable to this project, leave an empty string ('' if value is just a string)\n      // or an empty array ( [] ). Any empty values will not be displayed in the case study.\n\n      // PLEASE PLACE ALL IMAGES IN THE 'images' FOLDER INSIDE 'public'\n\n      background: [],\n      problem: [],\n      audience: [\n        \"This project was designed with a focus on potential employers who are looking to hire front-end web developers from Nashville Software School's Cohort 43.\", \n      ],\n      personas: [], // ex: ['persona1.jpg', 'persona2.jpg', ...]\n      challStmt: [\"How might we promote Demo Day and showcase Cohort 43's dual skill sets to potential employers with the ultimate goal of employment?\"],\n      team: [],\n      role: [\"UI/UX Designer & Front-End Developer\", \"During the prototyping and development stage, I focused on designing and implementing the cards on which each students' image, favorite quote, name, and social links would be displayed.\"],\n      constraints: [],\n      // for the process, each array element can be an image or text\n      // This allows people to put pictures before or after some paragraphs of text\n      // Each element is checked for any image extensions (.jpg and .png)\n      // If an element includes either extension substring, try to find the image file attached to the extension\n      process: [\n        \"This project was organized and executed by the UI/UX side of Cohort 43. We started off with the UI/UX group splitting into two teams, each to wireframe and mock up a prototype class site. This was the initial brainstorming stage since both teams' prototypes would be compared to spark a direction of design for the final site.\",\n        \"My team's design is shown below with distinct sections and a clear grid layout of cards displaying students in an effective, recognized manner. With a layout inspired by previous NSS cohort websites, we utilized the NSS logo red-orange gradient and a flat, contrasting navy blue as our primary colors.\",\n        \"C43-Site-Mockup-Team1.png\",\n        \"The other team used Pantone's color of the year for 2021, Illuminating, with a teal that paired well with it. They used these colors to design a unique, abstract, and attention-grabbing site header above the fold, which is shown below.\",\n        \"C43-Site-Mockup-Team2.png\",\n        \"After discussion, we realized both teams brought good ideas to the table. We all liked the way the first team's layout showed the technologies our cohort learned over our time at NSS. We also liked the color choice of the other team and the methodology behind the decision. The bright gold color felt fresh and exciting - a new beginning. We wanted to convey that as new hires, we can provide a fresh and aspirational face to any company that might consider hiring us.\",\n        \"With a compromise found between the two prototypes, we decided to merge the two into a hybrid design. We came together and created a new mockup shown below which incorporated the color scheme of the second team's prototype with the layout of the first team's prototype.\",\n        \"C43-Site-Mockup-Comp.png\",\n        \"We began user testing with 3 development professionals. We took their feedback and improved our site. We did 2 more rounds of user testing and decided on our final design.\",\n        \"C43-Site-Final.png\",\n      ],\n      retrospective: [\n        \"User testing from the beginning helped us make better design decisions. We realized usability trumps innovative design.\",\n        \"We learned how to facilitate remote user tests and how to prototype, develop, and present ideas to each other within a team.\", \n      ],\n      links: [\n        \"GitHub Repo\",\n        \"Live Site\"\n      ]\n    }\n  },\n  {\n    projNum: 1, // Increment this number with each new project -- lets site know the order in which to render projects\n    id: nanoid(),\n    img: \"MiniClueTemp.png\",\n    title: 'Mini Clue',\n    info: 'A simplified, online, competitive, single-player version of the classic detective game Clue®.',\n    info2: '',\n    url: '', // url for live demo of project\n    repo: 'https://github.com/bcdavis/CH43-Capstone-Mini-Clue', // if no repo, the button will not show up\n    techUsed: [\"JavaScript\", \"CSS3\", \"HTML5\", \"ReactJS\", \"Figma\", \"JSON Server\"], \n    caseStudy: {\n      // Each element in the following arrays represents a new paragraph of text or an image\n      // A line break is placed after each paragraph to allow some separation between bodies of text or images\n      // If a key/value pair is not applicable to this project, leave an empty string ('' if value is just a string)\n      // or an empty array ( [] ). Any empty values will not be displayed in the case study.\n\n      // PLEASE PLACE ALL IMAGES IN THE 'images' FOLDER INSIDE 'public'\n\n      background: [\"Clue® is a famous classic mystery game played on a board by 3 - 6 players. The object of the game is to determine who murdered the game's victim, Mr. Body, where the crime took place, and which weapon was used. Each player assumes the role of one of the six suspects and attempts to deduce the correct answer by strategically moving around a game board representing the rooms of a mansion and collecting clues about the circumstances of the murder from the other players.\"],\n      problem: [\n        \"The biggest problem with Clue®, though, is its accessibility. As of Fall 2020, there was no free, online, competitive, single-player, version of the boardgame Clue®.\", \n        \"A solution to this accessibility issue would be an online resource where individuals can quickly and easily play a game of Clue® by themselves. To measure a user's skill, each user would create an account where they could track their highest score and see the high scores of other users in a leaderboard.\",\n        \"Another issue facing Clue® itself was the fact that there was no way to customize the game. My solution would also include a method to customize the names of characters, weapons, and rooms inside a game. The custom game would be saved to the user who created it, but custom games would also have the option to be shared with all other users for them to play.\",\n        \"Success of this project would be achieved if players could create an account, play a classic game version, save their highest score and display that score on a scoreboard.\"\n      ],\n      audience: [\n        \"This project was geared towards individuals who want to play Clue® but may not have the time to play, others to play with, or even the board itself. Mini Clue is also a resource for those wishing to improve their fictional detective work by providing a measurable high score for each user. This also induces competition between users for the highest scoring game.\", \n      ],\n      personas: [], // ex: ['persona1.jpg', 'persona2.jpg', ...]\n      challStmt: [\"How might we create a web app and/or mobile app which provides a free, single-player, competitive, online version of the popular board game Clue® that’s easy to use and fun to play?\"],\n      team: [],\n      role: [\"Lead designer and front-end developer\"],\n      constraints: [\n        \"• 1 week to design, develop, and demonstrate a working product.\",\n      ],\n      // for the process, each array element can be an image or text\n      // This allows people to put pictures before or after some paragraphs of text\n      // Each element is checked for any image extensions (.jpg and .png)\n      // If an element includes either extension substring, try to find the image file attached to the extension\n      process: [\n        \"The first and arguably most important part of this project was solidifying the organization of data in the database. An ERD was created to record the essential information to achieve this project's goal.\", \n        \"MiniClueERD.png\",\n        \"The ERD above begins with the user account – locked behind a username and email address. Each user would have an id which was associated with their highest game score and any custom games they create. Every game of Mini Clue needed cards, so the cards are stored in a separate table, each card containing the id of the game to which it belonged. The original 21 cards have a corresponding game id of 0, which is the id for a classic game of Mini Clue.\",\n        \"Next came the wireframing and prototyping. I used pencil and paper to sketch my initial concepts and flow diagrams and then mocked those up using Figma. The state diagram below represents the process of playing a game of Mini Clue.\",\n        \"MiniClueGameFlow.png\",\n        \"The following Figma frames were my initial mock-ups for the project: the home page, custom game creation page, and about page.\",\n        \"MiniClueHomePage.png\",\n        \"MiniClueFigmaCreator.png\",\n        \"MiniClueFigmaAbout.png\",\n        \"Once the prototyping was complete, I began programming. I hosted a local database using JSON Server to act as my real-time database. I created some placeholder user data using famous fictional detectives like Sherlock Holmes. The following images show the final product as of demo day (Nov 20, 2020).\",\n        \"MiniClueDemo_Login.png\",\n        \"MiniClueDemo_Home.png\",\n        \"MiniClueDemo_About.png\",\n        \"MiniClueDemo_GameStart.png\",\n        \"MiniClueDemo_Gameplay.png\",\n        \"MiniClueDemo_PostGame.png\",\n        \"Unfortunately, due to time constraints, I had to narrow my window for success by cutting out the custom game creation system and user profile pages.\"\n      ],\n      retrospective: [\n        \"Completed my front-end capstone for Nashville Software School by creating a React web app.\",\n        \"My initial vision for this project was to include a custom game section in which a user could specify the names of the characters, weapons, and rooms of a game. A custom game would be saved to 'My Games' for that particular user and had the option to be shared publicly with other users in the 'Custom Games' section on the home page. I plan to continue working on this project and include the custom game aspect in the future.\", \n        \"If I could do this project again, I would do more initial research into what kind of resources I could use to aid in the development process such as npm packages for React and JavaScript.\"\n      ],\n    }\n  },\n  {\n    projNum: 2, // Increment this number with each new project -- lets site know the order in which to render projects\n    id: nanoid(),\n    img: \"REM_preview.png\",\n    title: 'REM LOG',\n    info: 'A free, online dream journal that supports text and audio.',\n    info2: '',\n    url: '', // url for live demo of project\n    repo: 'https://github.com/bcdavis/dreamJournal-capstoneC43', // if no repo, the button will not show up\n    techUsed: [\"JavaScript\", \"CSS3\", \"HTML5\", \"ReactJS\", \"React-Bootstrap\", \"Figma\", \"JSON Server\"], \n    caseStudy: {\n      // Each element in the following arrays represents a new paragraph of text or an image\n      // A line break is placed after each paragraph to allow some separation between bodies of text or images\n      // If a key/value pair is not applicable to this project, leave an empty string ('' if value is just a string)\n      // or an empty array ( [] ). Any empty values will not be displayed in the case study.\n\n      // PLEASE PLACE ALL IMAGES IN THE 'images' FOLDER INSIDE 'public'\n\n      background: [],\n      problem: [\n        \"It’s not easy to quickly write down a dream you just had, especially if you are busy and don’t have time to write it all out.\"\n      ],\n      audience: [\n        \"This project was geared towards all people, especially those who want to keep a record of their dreams.\", \n      ],\n      personas: [], // ex: ['persona1.jpg', 'persona2.jpg', ...]\n      challStmt: [\"How might we create a web app and/or mobile app which provides a free and efficient way for users to record their dreams digitally?\"],\n      team: [],\n      role: [\"Lead designer and front-end developer\"],\n      constraints: [\n        \"• All people have dreams\",\n        \"• Not all people will have time to type out their dreams in detail\",\n        \"• Anyone with a phone usually keeps it near them when they sleep, so a mobile-first design is preferred\"\n\n      ],\n      // for the process, each array element can be an image or text\n      // This allows people to put pictures before or after some paragraphs of text\n      // Each element is checked for any image extensions (.jpg and .png)\n      // If an element includes either extension substring, try to find the image file attached to the extension\n      process: [\n        \"The first and arguably most important part of this project was solidifying the organization of data in the database. An ERD was created to record the essential information to achieve this project's goal.\", \n        \"REM_ERD.png\",\n        \"Next came the wireframing and prototyping. I made some initial components in Figma that are shown below.\",\n        \"REM_FIG_components.png\",\n        \"The following Figma frames were my initial mock-ups for the project made using the components from the image above: \",\n        \"REM_FIG_list.png\",\n        \"REM_FIG_listFilter.png\",\n        \"REM_FIG_add.png\",\n        \"REM_FIG_addRec.png\",\n        \"REM_FIG_addAudio.png\",\n        \"Once the prototyping was complete, I began programming. I hosted a local database using JSON Server to act as my real-time database. I chose to add react-bootstrap's component library to the project, which would help with the constructing of forms and other components. In the components image above, I made two versions of dream cards. I decided to work with the second version (the one that wasn't used in the Figma mockups above) because it's layout was more conducive to react-bootstrap's Card component. I also imported Bootstrap's icon library to reference for my icons.\",\n        \"REM_login.png\",\n        \"REM_list.png\",\n        \"REM_view.png\",\n        \"REM_add.png\",\n        \"The most difficult part of this project, by far, was working with recording audio from the built-in microphone through the browser. I looked for pre-existing react components which could swiftly record and store an audio file. I ended up Using a basic audio recording script which asked the browser for permission to use the microphone, recorded audio at the press of a button, and rendered a basic HTML audio element once captured. Since I was hosting my website through JSON Server, I could not store the audio file itself. So, this iteration of the project will save the name of the audio file recorded, but not the file itself until I incorporate some external support from a file-storing resource like Cloudinary.\",\n      ],\n      retrospective: [\n        \"Completed my second capstone for Nashville Software School by creating a React web app.\",\n        \"In the future I plan to add a fully supported audio recording system by integrating support from Cloudinary and full-time database hosting with Firebase.\", \n        \"If I could do this project again, I would do more user testing with my Figma prototype and versions of the final product online.\"\n      ],\n    }\n  },\n];\n\n// CONTACT DATA\nexport const contactData = {\n  cta: \"I'm excited to work together with you and your team!\",\n  btn: '',\n  email: 'bcdavis@i65n.com',\n};\n\n// FOOTER DATA\nexport const footerData = {\n  networks: [\n    {\n      id: nanoid(),\n      name: 'linkedin',\n      url: 'https://www.linkedin.com/in/ben-c-davis/',\n    },\n    {\n      id: nanoid(),\n      name: 'github',\n      url: 'https://github.com/bcdavis',\n    },\n  ],\n};\n\n// Github start/fork buttons\nexport const githubButtons = {\n  isEnabled: false, // set to false to disable the GitHub stars/fork buttons\n};","//import logo from './logo.svg';\n//import './App.css';\n\n\nimport React, { useState, useEffect } from 'react';\nimport Hero from './components/Hero/Hero';\nimport About from './components/About/About';\nimport Projects from './components/Projects/Projects';\nimport Contact from './components/Contact/Contact';\nimport Footer from './components/Footer/Footer';\nimport NavBar from './components/Nav/Nav';\n//import ToggleButton from 'react-bootstrap/ToggleButton'\n\nimport { PortfolioProvider } from './context/context';\n\nimport { heroData, navData, aboutData, projectsData, contactData, footerData } from './mock/data';\n\nfunction App () {\n  const [hero, setHero] = useState({});\n  const [about, setAbout] = useState({});\n  const [projects, setProjects] = useState([]);\n  const [contact, setContact] = useState({});\n  const [footer, setFooter] = useState({});\n  const [nav, setNav] = useState({});\n\n  // const setupObserver = () => {\n  //   let observerConfig = {\n  //     root: null,\n  //     rootMargin: '0px',\n  //     threshold: 0.5, // detect target when more than 50% of it is visible\n  //   };\n  //   function observerFn(entries, observer) {\n  //     let heroEntry = entries[0];\n  //     let aboutEntry = entries[1];\n  //     let projectsEntry = entries[2];\n  //     let contactEntry = entries[3];\n  //     if(heroEntry.isIntersecting){\n  //       console.log(\"Current Intersection: \", heroEntry.target);\n  //     }\n  //     else if(aboutEntry.isIntersecting){\n  //       console.log(\"Current Intersection: \", aboutEntry.target);\n  //     }\n  //     else if(projectsEntry.isIntersecting){\n  //       console.log(\"Current Intersection: \", projectsEntry.target);\n  //     }\n  //     else if(contactEntry.isIntersecting){\n  //       console.log(\"Current Intersection: \", contactEntry.target);\n  //     }\n  //     else{\n  //       console.log(\"No current intersecting entries...\");\n  //     }\n\n  //   }\n  //   let observer = new IntersectionObserver(observerFn, observerConfig);\n\n  //   let aboutSect= document.getElementById('about');\n  //   let projectsSect= document.getElementById('projects');\n  //   let heroSect= document.getElementById('hero');\n  //   let contactSect= document.getElementById('contact');\n\n  //   observer.observe(heroSect);\n  //   observer.observe(aboutSect);\n  //   observer.observe(projectsSect);\n  //   observer.observe(contactSect);\n  // };\n\n  useEffect(() => {\n    setHero({ ...heroData });\n    setAbout({ ...aboutData });\n    setProjects([...projectsData]);\n    setContact({ ...contactData });\n    setFooter({ ...footerData });\n    setNav({ ...navData });\n    //setupObserver();\n  }, []);\n\n  // function toggleNav() {\n  //   let sidenav = document.getElementById(\"vert-nav\");\n  //   sidenav.classList.toggle(\"responsive\");\n  //   if(sidenav.classList.contains(\"responsive\")){\n  //     //document.getElementById(\"right-content\").style.marginLeft = \"250px\";\n  //     document.getElementById(\"right-content\").classList.add(\"responsive\");\n  //   }\n  //   else{\n  //     //document.getElementById(\"right-content\").style.marginLeft = \"0\";\n  //     document.getElementById(\"right-content\").classList.remove(\"responsive\");\n  //   }\n  // }\n\n  const handleMenuClick = (e) => {\n    //  console.log(e.currentTarget.checked);\n    e.currentTarget.classList.toggle('open');\n    //console.log(e.currentTarget);\n    // console.log('checked...?');\n    const x = document.getElementById('vert-nav');\n    //console.log(x);\n\n    if (e.currentTarget.classList.contains('open')){\n      x.classList.add('sidenav-open');\n    }\n    else{\n      x.classList.remove('sidenav-open');\n    }\n  };\n\n  return (\n    <>\n      <main className=\"flex-row main-page-container\">\n        <PortfolioProvider value={{ hero, nav, about, projects, contact, footer }}>\n          {/* <input id=\"hamburger\" type=\"checkbox\" className=\"hamburger-checkbox\" />\n          <label for=\"hamburger\" className=\"hamburger-label\" role=\"button\" aria-labelledby=\"menu\">\n            &#xf0c9;\n          </label> */}\n          <button\n            className=\"mobile-menu-base-tab\"\n            type=\"button\"\n            onClick={(e) => handleMenuClick(e)}\n          >\n            <div className=\"menu btn2\" data-menu=\"1\">\n              <div className=\"icon\"></div>\n            </div>\n          </button>\n          <NavBar />\n          <div className=\"right-content\">\n            {/* <div id=\"main2\">\n              <ToggleButton id=\"span\" onChange={document.getElementById(\"vert-nav\").classList.toggle('responsive')}>\n                &#9776; open\n              </ToggleButton>\n            </div> */}\n            <Hero />\n            <About />\n            <Projects />\n            <Contact />\n            <Footer />\n          </div>\n        </PortfolioProvider>\n      </main>\n    </>\n  );\n};\n\nexport default App;\n\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style/main.scss';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}